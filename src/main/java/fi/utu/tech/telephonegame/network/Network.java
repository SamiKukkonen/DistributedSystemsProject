package fi.utu.tech.telephonegame.network;
import java.io.IOException;
import java.io.Serializable;
import java.net.UnknownHostException;

/**
 * Do not edit this file.
 * Älä muokkaa tätä tiedostoa.
 * 
 * Defines public interface for Network. The network package is
 * responsible for keeping track of connections to neighbouring nodes,
 * connecting and listening for connections and providing an interface that
 * allows to post (and access received) messages to/from the peer network.
 * 
 * Network should be accessed outside the network package via this public
 * interface rather than depending on the concrete implementation
 * (NetworkService) directly. In practice, the reference is already made
 * correctly in MessageBroker and you should be good if you keep using the
 * reference there and by **not** modifying this interface.
 * 
 * Again, remember that this is a public interface, consisting of public method
 * declarations, used by other packages. Your internal network implementation
 * (NetworkService) is responsible for actually delivering the messages to the
 * neighbours and receiving the messages from the network, making them available
 * in the "retrieveMessage" method. The internal implementation probably will
 * have more methods than defined in this interface.
 * 
 */
public interface Network {
	/**
	 * Start listening listening for new peers
	 * @param serverPort The port to listen to new peers
	 */
	public void startListening(int serverPort);

	/**
	 * Establish a connection to another peer
	 * @param clientIP The IP address to connect to
	 * @param clientPort The port to connect to
	 * @throws IOException
	 * @throws UnknownHostException
	 */
	public void connect(String clientIP, int clientPort) throws IOException, UnknownHostException;

	/**
	 * Add an object to the queue for sending it to the peer network (all neighbours)
	 * 
	 * @param out The Serializable object to be sent
	 */
	public void postMessage(Serializable out);

	/**
	 * Read the next message from the queue of received messages
	 * 
	 * @return The next message
	 */
	public Object retrieveMessage() throws InterruptedException;

}
