package fi.utu.tech.telephonegame.util;

import java.util.Arrays;

/**
 * Do not edit this file. Älä muokkaa tätä tiedostoa.
 * 
 * A thread-safe ring buffer for saving temporary values.
 * A ring buffer loops around itself, overwriting the oldest
 * values after filling up its capacity.
 * 
 * Used by Resolver to quarantee idempotency on multi-interface hosts
 * No need to use in assignment
 */
public class RingBuffer<E> {

    private Object[] buffer;
    private int pointer;
    private int size;
    private int capacity;

    public RingBuffer(int capacity) {
        this.buffer = new Object[capacity];
        this.pointer = 0;
        this.size = 0;
        this.capacity = capacity;
    }

    public synchronized void add(E e) {
        buffer[pointer] = e;
        pointer = (pointer + 1) % buffer.length;
        if (size<capacity) size++;
    }

    public synchronized int size() {
        return size;
    }

    public synchronized boolean contains(E e) {
        if (e == null) {
            for (Object o : buffer) {
                if (o == null)
                    return true;
            }
        } else {
            for (int i=0; i<size; i++) {
                if (buffer[i].equals(e))
                    return true;
            }
        }
        return false;
    }

    public String toString() {
        return Arrays.toString(this.buffer);
    }
}
